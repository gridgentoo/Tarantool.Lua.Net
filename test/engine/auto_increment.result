test_run = require('test_run').new()
---
...
engine = test_run:get_cfg('engine')
---
...
fiber = require('fiber')
---
...
--
-- Basic test.
--
s = box.schema.space.create('test', {engine = engine})
---
...
_ = s:create_index('pk')
---
...
s:auto_increment{}
---
- [1]
...
s:auto_increment{'a'}
---
- [2, 'a']
...
s:auto_increment{'b', 'c'}
---
- [3, 'b', 'c']
...
s:select()
---
- - [1]
  - [2, 'a']
  - [3, 'b', 'c']
...
--
-- Deletion of the last element does not restart the sequence.
--
_ = s:delete{3}
---
...
s:auto_increment{'d', 'e', 'f'}
---
- [4, 'd', 'e', 'f']
...
s:select()
---
- - [1]
  - [2, 'a']
  - [4, 'd', 'e', 'f']
...
--
-- Space truncation does not restart the sequence.
--
s:truncate()
---
...
s:auto_increment{1}
---
- [5, 1]
...
s:auto_increment{2}
---
- [6, 2]
...
s:select()
---
- - [5, 1]
  - [6, 2]
...
--
-- Insert/replace updates the space sequence if the new
-- value is greater than the sequence value.
--
s:truncate()
---
...
s:insert{100}
---
- [100]
...
s:auto_increment{}
---
- [101]
...
s:select()
---
- - [100]
  - [101]
...
s:replace{1000}
---
- [1000]
...
s:auto_increment{}
---
- [1001]
...
s:select()
---
- - [100]
  - [101]
  - [1000]
  - [1001]
...
s:insert{50}
---
- [50]
...
s:replace{150}
---
- [150]
...
s:auto_increment{}
---
- [1002]
...
s:select()
---
- - [50]
  - [100]
  - [101]
  - [150]
  - [1000]
  - [1001]
  - [1002]
...
--
-- Sequence overflow.
--
s:truncate()
---
...
s:insert{tonumber64('18446744073709551615')}
---
- [18446744073709551615]
...
s:auto_increment{}
---
- [0]
...
s:auto_increment{}
---
- [1]
...
s:select{}
---
- - [0]
  - [1]
  - [18446744073709551615]
...
s:replace{tonumber64('18446744073709551615')}
---
- [18446744073709551615]
...
s:auto_increment{} -- fails as duplicate
---
- error: Duplicate key exists in unique index 'pk' in space 'test'
...
s:drop()
---
...
--
-- Deletion of the primary key restarts the sequence
-- while deletion of a secondary key does not.
--
s = box.schema.space.create('test', {engine = engine})
---
...
_ = s:create_index('pk')
---
...
_ = s:create_index('sk', {parts = {2, 'unsigned'}})
---
...
s:auto_increment{123}
---
- [1, 123]
...
s.index.sk:drop()
---
...
s:auto_increment{456}
---
- [2, 456]
...
s:select()
---
- - [1, 123]
  - [2, 456]
...
s.index.pk:drop()
---
...
_ = s:create_index('pk')
---
...
s:auto_increment{'aaa'}
---
- [1, 'aaa']
...
s:auto_increment{'bbb'}
---
- [2, 'bbb']
...
s:select()
---
- - [1, 'aaa']
  - [2, 'bbb']
...
s:drop()
---
...
--
-- Attempt to auto increment a space without indexes fails.
--
s = box.schema.space.create('test', {engine = engine})
---
...
s:auto_increment{123}
---
- error: 'No index #0 is defined in space ''test'''
...
--
-- Attempt to auto increment a space with an unsuitable
-- primary key fails.
--
_ = s:create_index('pk', {parts = {1, 'string'}})
---
...
s:auto_increment{}
---
- error: Space 'test' does not support auto increment
...
s.index.pk:drop()
---
...
_ = s:create_index('pk', {parts = {1, 'unsigned', 2, 'unsigned'}})
---
...
s:auto_increment{}
---
- error: Space 'test' does not support auto increment
...
s.index.pk:drop()
---
...
_ = s:create_index('pk', {parts = {2, 'unsigned'}})
---
...
s:auto_increment{}
---
- error: Space 'test' does not support auto increment
...
s:drop()
---
...
--
-- There is no C or IPROTO API for auto increment operation.
-- The user is supposed to provide 'nil' for the first
-- tuple field in INSERT/REPLACE to trigger auto increment.
-- This is what space.auto_increment Lua function actually
-- does. Check that this API works as well.
--
s = box.schema.space.create('test', {engine = engine})
---
...
_ = s:create_index('pk')
---
...
s:insert(box.tuple.new(nil))
---
- [1]
...
s:insert{nil, 'a'}
---
- [2, 'a']
...
_ = s:delete(2)
---
...
s:insert{nil, 'b'}
---
- [3, 'b']
...
s:auto_increment{'c'}
---
- [4, 'c']
...
s:select()
---
- - [1]
  - [3, 'b']
  - [4, 'c']
...
s:drop()
---
...
--
-- Check that we can still have 'nil' for the first tuple value
-- if auto increment is not used.
--
s = box.schema.space.create('test', {engine = engine})
---
...
_ = s:create_index('pk', {parts = {2, 'unsigned'}})
---
...
s:insert{nil, 1}
---
- [null, 1]
...
s:insert{1, 10}
---
- [1, 10]
...
s:insert{nil, 2}
---
- [null, 2]
...
s:insert{2, 20}
---
- [2, 20]
...
s:select()
---
- - [null, 1]
  - [null, 2]
  - [1, 10]
  - [2, 20]
...
s:drop()
---
...
--
-- Auto increment is consistent when used concurrently.
--
s = box.schema.space.create('test', {engine = engine})
---
...
_ = s:create_index('pk')
---
...
c = fiber.channel(10)
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
for i = 1, 10 do
    fiber.create(function()
        for j = 1, 10 do
            s:auto_increment{}
            if j % 3 == 0 then
                fiber.sleep(0)
            end
        end
        c:put(true)
    end)
end
for i = 1, 10 do
    c:get()
end
test_run:cmd("setopt delimiter ''");
---
...
s:count()
---
- 100
...
s.index.pk:min()
---
- [1]
...
s.index.pk:max()
---
- [100]
...
s:drop()
---
...
--
-- Auto increment can be used in transaction.
--
s = box.schema.space.create('test', {engine = engine})
---
...
_ = s:create_index('pk')
---
...
box.begin() s:auto_increment{} s:auto_increment{} box.commit()
---
...
s:select()
---
- - [1]
  - [2]
...
box.begin() s:auto_increment{} s:auto_increment{} box.rollback()
---
...
s:select()
---
- - [1]
  - [2]
...
box.begin() s:auto_increment{} s:auto_increment{} box.commit()
---
...
s:select()
---
- - [1]
  - [2]
  - [5]
  - [6]
...
s:drop()
---
...
--
-- Auto increment is persistent.
--
s1 = box.schema.space.create('test1', {engine = engine})
---
...
_ = s1:create_index('pk')
---
...
s1:auto_increment{}
---
- [1]
...
s1:auto_increment{}
---
- [2]
...
_ = s1:delete(2)
---
...
s2 = box.schema.space.create('test2', {engine = engine})
---
...
_ = s2:create_index('pk')
---
...
s2:auto_increment{}
---
- [1]
...
s2:auto_increment{}
---
- [2]
...
box.snapshot()
---
- ok
...
_ = s2:delete(2)
---
...
s3 = box.schema.space.create('test3', {engine = engine})
---
...
_ = s3:create_index('pk')
---
...
s3:auto_increment{}
---
- [1]
...
s3:auto_increment{}
---
- [2]
...
_ = s3:delete(2)
---
...
test_run:cmd('restart server default')
s1 = box.space.test1
---
...
s2 = box.space.test2
---
...
s3 = box.space.test3
---
...
s1:auto_increment{}
---
- [3]
...
s2:auto_increment{}
---
- [3]
...
s3:auto_increment{}
---
- [3]
...
s1:select()
---
- - [1]
  - [3]
...
s2:select()
---
- - [1]
  - [3]
...
s3:select()
---
- - [1]
  - [3]
...
s1:drop()
---
...
s2:drop()
---
...
s3:drop()
---
...
